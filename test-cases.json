{
  "jsonComparisonTests": {
    "basicComparison": [
      {
        "name": "简单对象比较",
        "left": "{\"name\": \"John\", \"age\": 30}",
        "right": "{\"name\": \"Jane\", \"age\": 25}",
        "expectedDiffs": 2,
        "description": "测试基本的对象属性变更"
      },
      {
        "name": "对象属性新增",
        "left": "{\"name\": \"John\"}",
        "right": "{\"name\": \"John\", \"age\": 30}",
        "expectedDiffs": 1,
        "description": "测试新增属性检测"
      },
      {
        "name": "对象属性删除",
        "left": "{\"name\": \"John\", \"age\": 30}",
        "right": "{\"name\": \"John\"}",
        "expectedDiffs": 1,
        "description": "测试删除属性检测"
      }
    ],
    "nestedObjectComparison": [
      {
        "name": "嵌套对象比较",
        "left": "{\"user\": {\"name\": \"John\", \"profile\": {\"age\": 30, \"city\": \"NY\"}}}",
        "right": "{\"user\": {\"name\": \"Jane\", \"profile\": {\"age\": 25, \"city\": \"SF\"}}}",
        "expectedDiffs": 3,
        "description": "测试深层嵌套对象的比较"
      },
      {
        "name": "嵌套对象部分变更",
        "left": "{\"settings\": {\"theme\": \"dark\", \"notifications\": {\"email\": true, \"sms\": false}}}",
        "right": "{\"settings\": {\"theme\": \"light\", \"notifications\": {\"email\": true, \"sms\": true}}}",
        "expectedDiffs": 2,
        "description": "测试嵌套对象中的部分属性变更"
      }
    ],
    "arrayComparison": [
      {
        "name": "简单数组比较",
        "left": "[1, 2, 3]",
        "right": "[1, 2, 4]",
        "expectedDiffs": 1,
        "description": "测试数组元素变更"
      },
      {
        "name": "数组长度变化",
        "left": "[1, 2, 3]",
        "right": "[1, 2, 3, 4]",
        "expectedDiffs": 1,
        "description": "测试数组新增元素"
      },
      {
        "name": "数组元素删除",
        "left": "[1, 2, 3, 4]",
        "right": "[1, 2, 4]",
        "expectedDiffs": 1,
        "description": "测试数组删除元素"
      },
      {
        "name": "数组元素移动",
        "left": "[\"a\", \"b\", \"c\"]",
        "right": "[\"c\", \"a\", \"b\"]",
        "expectedDiffs": 2,
        "description": "测试数组元素顺序变化"
      }
    ],
    "complexArrayComparison": [
      {
        "name": "对象数组比较",
        "left": "[{\"id\": 1, \"name\": \"Alice\"}, {\"id\": 2, \"name\": \"Bob\"}]",
        "right": "[{\"id\": 1, \"name\": \"Alice\"}, {\"id\": 2, \"name\": \"Charlie\"}]",
        "expectedDiffs": 1,
        "description": "测试对象数组中的元素变更"
      },
      {
        "name": "混合数组比较",
        "left": "[1, \"text\", {\"key\": \"value\"}, [1, 2]]",
        "right": "[2, \"text\", {\"key\": \"new_value\"}, [1, 2, 3]]",
        "expectedDiffs": 3,
        "description": "测试包含多种数据类型的数组比较"
      }
    ],
    "edgeCases": [
      {
        "name": "空对象比较",
        "left": "{}",
        "right": "{}",
        "expectedDiffs": 0,
        "description": "测试空对象比较"
      },
      {
        "name": "空数组比较",
        "left": "[]",
        "right": "[]",
        "expectedDiffs": 0,
        "description": "测试空数组比较"
      },
      {
        "name": "null值比较",
        "left": "{\"value\": null}",
        "right": "{\"value\": \"not null\"}",
        "expectedDiffs": 1,
        "description": "测试null值的比较"
      },
      {
        "name": "boolean值比较",
        "left": "{\"active\": true}",
        "right": "{\"active\": false}",
        "expectedDiffs": 1,
        "description": "测试布尔值比较"
      },
      {
        "name": "数字精度比较",
        "left": "{\"price\": 9.99}",
        "right": "{\"price\": 9.999}",
        "expectedDiffs": 1,
        "description": "测试浮点数精度比较"
      }
    ],
    "realWorldScenarios": [
      {
        "name": "用户配置文件",
        "left": "{\"user\": {\"id\": 123, \"name\": \"John Doe\", \"email\": \"john@example.com\", \"preferences\": {\"theme\": \"dark\", \"language\": \"en\", \"notifications\": {\"email\": true, \"push\": false}}, \"lastLogin\": \"2024-01-01T00:00:00Z\"}}",
        "right": "{\"user\": {\"id\": 123, \"name\": \"John Doe\", \"email\": \"john.doe@newdomain.com\", \"preferences\": {\"theme\": \"light\", \"language\": \"zh\", \"notifications\": {\"email\": true, \"push\": true}}, \"lastLogin\": \"2024-01-02T10:30:00Z\"}}",
        "expectedDiffs": 5,
        "description": "测试真实的用户配置文件变更场景"
      },
      {
        "name": "API响应差异",
        "left": "{\"status\": \"success\", \"data\": [{\"id\": 1, \"product\": \"Laptop\", \"price\": 999.99, \"inStock\": true}, {\"id\": 2, \"product\": \"Mouse\", \"price\": 29.99, \"inStock\": false}], \"metadata\": {\"total\": 2, \"page\": 1}}",
        "right": "{\"status\": \"success\", \"data\": [{\"id\": 1, \"product\": \"Laptop\", \"price\": 899.99, \"inStock\": true}, {\"id\": 2, \"product\": \"Wireless Mouse\", \"price\": 39.99, \"inStock\": true}], \"metadata\": {\"total\": 2, \"page\": 1}}",
        "expectedDiffs": 3,
        "description": "测试API响应数据的比较"
      }
    ]
  },
  "jsonRepairTests": {
    "basicRepair": [
      {
        "name": "缺少引号的键名",
        "input": "{name: \"John\", age: 30}",
        "shouldSucceed": true,
        "description": "修复对象键名缺少引号"
      },
      {
        "name": "单引号转双引号",
        "input": "{'name': 'John', 'age': 30}",
        "shouldSucceed": true,
        "description": "将单引号转换为双引号"
      },
      {
        "name": "尾随逗号",
        "input": "{\"name\": \"John\", \"age\": 30,}",
        "shouldSucceed": true,
        "description": "移除对象末尾的多余逗号"
      },
      {
        "name": "数组尾随逗号",
        "input": "[1, 2, 3,]",
        "shouldSucceed": true,
        "description": "移除数组末尾的多余逗号"
      }
    ],
    "commentRemoval": [
      {
        "name": "单行注释",
        "input": "{\\n  \"name\": \"John\", // 用户名\\n  \"age\": 30\\n}",
        "shouldSucceed": true,
        "description": "移除单行注释"
      },
      {
        "name": "多行注释",
        "input": "{\\n  /* 用户信息 */\\n  \"name\": \"John\",\\n  \"age\": 30\\n}",
        "shouldSucceed": true,
        "description": "移除多行注释"
      }
    ],
    "missingCommas": [
      {
        "name": "对象属性间缺少逗号",
        "input": "{\\n  \"name\": \"John\"\\n  \"age\": 30\\n}",
        "shouldSucceed": true,
        "description": "添加对象属性间缺少的逗号"
      },
      {
        "name": "数组元素间缺少逗号",
        "input": "[\\n  \"apple\"\\n  \"banana\"\\n  \"orange\"\\n]",
        "shouldSucceed": true,
        "description": "添加数组元素间缺少的逗号"
      }
    ],
    "bracketMatching": [
      {
        "name": "缺少闭合花括号",
        "input": "{\"name\": \"John\", \"age\": 30",
        "shouldSucceed": true,
        "description": "添加缺少的闭合花括号"
      },
      {
        "name": "缺少闭合方括号",
        "input": "[1, 2, 3",
        "shouldSucceed": true,
        "description": "添加缺少的闭合方括号"
      },
      {
        "name": "嵌套括号不匹配",
        "input": "{\"users\": [{\"name\": \"John\", \"details\": {\"age\": 30}",
        "shouldSucceed": true,
        "description": "修复复杂的嵌套括号匹配问题"
      }
    ],
    "specialValues": [
      {
        "name": "undefined转null",
        "input": "{\"value\": undefined, \"other\": \"test\"}",
        "shouldSucceed": true,
        "description": "将undefined值转换为null"
      },
      {
        "name": "unquoted字符串值",
        "input": "{\"status\": active, \"type\": premium}",
        "shouldSucceed": true,
        "description": "为未加引号的字符串值添加引号"
      }
    ],
    "complexScenarios": [
      {
        "name": "多种错误组合",
        "input": "{\\n  name: 'John', // 用户名\\n  age: 30,\\n  active: true\\n  'hobbies': [\\n    'reading'\\n    'coding',\\n  ],\\n  details: {\\n    city: undefined\\n  // 地址信息\\n}",
        "shouldSucceed": true,
        "description": "修复包含多种错误的复杂JSON"
      },
      {
        "name": "LLM生成的错误JSON",
        "input": "{\\n  \\\"response\\\": \\\"Here's the data:\\\",\\n  \\\"items\\\": [\\n    {name: \\\"item1\\\", value: 123},\\n    {name: \\\"item2\\\", value: undefined}\\n  ],\\n  \\\"status\\\": success,\\n}",
        "shouldSucceed": true,
        "description": "修复AI/LLM生成的常见错误JSON格式"
      }
    ],
    "edgeCases": [
      {
        "name": "空字符串",
        "input": "",
        "shouldSucceed": false,
        "description": "处理空输入"
      },
      {
        "name": "只有空格",
        "input": "   \\n  \\t  ",
        "shouldSucceed": false,
        "description": "处理只包含空白字符的输入"
      },
      {
        "name": "完全无效的格式",
        "input": "这不是JSON格式的数据",
        "shouldSucceed": false,
        "description": "处理完全不是JSON格式的输入"
      },
      {
        "name": "已经正确的JSON",
        "input": "{\"name\": \"John\", \"age\": 30, \"active\": true}",
        "shouldSucceed": true,
        "description": "处理已经正确的JSON，应该只进行格式化"
      }
    ]
  },
  "performanceTests": [
    {
      "name": "大型JSON对象比较",
      "description": "测试包含1000+属性的大型JSON对象比较性能",
      "generateLargeJson": {
        "objectSize": 1000,
        "nestingLevel": 5,
        "arraySize": 100
      }
    },
    {
      "name": "深层嵌套结构",
      "description": "测试嵌套层级达到20层的JSON结构处理",
      "generateDeepJson": {
        "maxDepth": 20,
        "propertiesPerLevel": 3
      }
    },
    {
      "name": "大数组处理",
      "description": "测试包含10000个元素的数组比较性能",
      "generateLargeArray": {
        "arraySize": 10000,
        "elementType": "mixed"
      }
    }
  ]
}